from aiogram import Bot, Dispatcher, F
import asyncio
from dotenv import load_dotenv
import os
from aiogram.filters import Command

from utils.commands import set_commands
from handlers.start import get_start
from state.register import RegisterState
from state.create import CreateState
from handlers.register import start_register, register_name, register_phone
from handlers.admin.create import create_event, select_place, select_date, select_time
from filters.CheckAdmin import CheckAdmin

# –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö!!
load_dotenv()

token = os.getenv('TOKEN')
admin_id = os.getenv('ADMIN_ID')

""" –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤ —Å –±–æ—Ç–æ–º """

bot = Bot(token=token, parse_mode='HTML')
dp = Dispatcher()

""" —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∞–π–¥–∏—à–Ω–∏–∫
from aiogram.filters import CommandStart
"""

# @dp.message(CommandStart())
# async def command_start_handler(message):
#     await message.answer(f'–¢–≤–æ–π id: {message.from_user.id}')

""" start_bot = –æ–ø–æ–≤–µ—â–∞–µ—Ç ADMIN –æ –∑–∞–ø—É—Å–∫–µ """


async def start_bot(bot: Bot):
    await bot.send_message(1375989844, text='ü§ñC-3PO –±—ã–ª –∑–∞–ø—É—â–µ–Ω')


dp.startup.register(start_bot)
dp.message.register(get_start, Command(commands='start'))


#–ª–µ–ø–∏–º —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*
dp.message.register(start_register, F.text=='üõ´–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è!üõ¨')
dp.message.register(register_name, RegisterState.regName)
dp.message.register(register_phone, RegisterState.regPhone)
#—Ö—ç–Ω–¥–ª–µ—Ä —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
dp.message.register(create_event, Command(commands='help'), CheckAdmin())
dp.callback_query.register(select_place, CreateState.place)
dp.callback_query.register(select_date, CreateState.date)
dp.callback_query.register(select_time, CreateState.time)


""" –¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—à–∏–±–∫—É : –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ù–ï –¢–û , —Ç–æ –±–æ—Ç= break. """


async def start():
    await set_commands(bot)
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(start())
